// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0
// source: pack_calculator.proto

package pack_calculator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PackCalculator_CalculatePack_FullMethodName = "/github.com.yapanyushin.pack_calculator.PackCalculator/CalculatePack"
)

// PackCalculatorClient is the client API for PackCalculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackCalculatorClient interface {
	// Calculates Pack according to provided list of possible packings
	CalculatePack(ctx context.Context, in *CalculatePacksAmountRequest, opts ...grpc.CallOption) (*CalculatePacksAmountResponse, error)
}

type packCalculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewPackCalculatorClient(cc grpc.ClientConnInterface) PackCalculatorClient {
	return &packCalculatorClient{cc}
}

func (c *packCalculatorClient) CalculatePack(ctx context.Context, in *CalculatePacksAmountRequest, opts ...grpc.CallOption) (*CalculatePacksAmountResponse, error) {
	out := new(CalculatePacksAmountResponse)
	err := c.cc.Invoke(ctx, PackCalculator_CalculatePack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackCalculatorServer is the server API for PackCalculator service.
// All implementations must embed UnimplementedPackCalculatorServer
// for forward compatibility
type PackCalculatorServer interface {
	// Calculates Pack according to provided list of possible packings
	CalculatePack(context.Context, *CalculatePacksAmountRequest) (*CalculatePacksAmountResponse, error)
	mustEmbedUnimplementedPackCalculatorServer()
}

// UnimplementedPackCalculatorServer must be embedded to have forward compatible implementations.
type UnimplementedPackCalculatorServer struct {
}

func (UnimplementedPackCalculatorServer) CalculatePack(context.Context, *CalculatePacksAmountRequest) (*CalculatePacksAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculatePack not implemented")
}
func (UnimplementedPackCalculatorServer) mustEmbedUnimplementedPackCalculatorServer() {}

// UnsafePackCalculatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackCalculatorServer will
// result in compilation errors.
type UnsafePackCalculatorServer interface {
	mustEmbedUnimplementedPackCalculatorServer()
}

func RegisterPackCalculatorServer(s grpc.ServiceRegistrar, srv PackCalculatorServer) {
	s.RegisterService(&PackCalculator_ServiceDesc, srv)
}

func _PackCalculator_CalculatePack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculatePacksAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackCalculatorServer).CalculatePack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackCalculator_CalculatePack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackCalculatorServer).CalculatePack(ctx, req.(*CalculatePacksAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PackCalculator_ServiceDesc is the grpc.ServiceDesc for PackCalculator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PackCalculator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.yapanyushin.pack_calculator.PackCalculator",
	HandlerType: (*PackCalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculatePack",
			Handler:    _PackCalculator_CalculatePack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pack_calculator.proto",
}
