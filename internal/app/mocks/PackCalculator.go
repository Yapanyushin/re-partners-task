// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	app "github.com/Yapanyushin/tabeo-challenge/internal/app"
	mock "github.com/stretchr/testify/mock"
)

// PackCalculator is an autogenerated mock type for the PackCalculator type
type PackCalculator struct {
	mock.Mock
}

type PackCalculator_Expecter struct {
	mock *mock.Mock
}

func (_m *PackCalculator) EXPECT() *PackCalculator_Expecter {
	return &PackCalculator_Expecter{mock: &_m.Mock}
}

// CalculatePacksAmounts provides a mock function with given fields: items
func (_m *PackCalculator) CalculatePacksAmounts(items int32) []app.PacksAmount {
	ret := _m.Called(items)

	if len(ret) == 0 {
		panic("no return value specified for CalculatePacksAmounts")
	}

	var r0 []app.PacksAmount
	if rf, ok := ret.Get(0).(func(int32) []app.PacksAmount); ok {
		r0 = rf(items)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]app.PacksAmount)
		}
	}

	return r0
}

// PackCalculator_CalculatePacksAmounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculatePacksAmounts'
type PackCalculator_CalculatePacksAmounts_Call struct {
	*mock.Call
}

// CalculatePacksAmounts is a helper method to define mock.On call
//   - items int32
func (_e *PackCalculator_Expecter) CalculatePacksAmounts(items interface{}) *PackCalculator_CalculatePacksAmounts_Call {
	return &PackCalculator_CalculatePacksAmounts_Call{Call: _e.mock.On("CalculatePacksAmounts", items)}
}

func (_c *PackCalculator_CalculatePacksAmounts_Call) Run(run func(items int32)) *PackCalculator_CalculatePacksAmounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int32))
	})
	return _c
}

func (_c *PackCalculator_CalculatePacksAmounts_Call) Return(_a0 []app.PacksAmount) *PackCalculator_CalculatePacksAmounts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PackCalculator_CalculatePacksAmounts_Call) RunAndReturn(run func(int32) []app.PacksAmount) *PackCalculator_CalculatePacksAmounts_Call {
	_c.Call.Return(run)
	return _c
}

// NewPackCalculator creates a new instance of PackCalculator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPackCalculator(t interface {
	mock.TestingT
	Cleanup(func())
}) *PackCalculator {
	mock := &PackCalculator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
